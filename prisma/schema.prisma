generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username         String      @unique @default(cuid())
  bannerUrl        String?
  bio              String?
  gameLists        GameList[]
  movieLists       MovieList[]
  favoriteGameIds  String[]
  favoriteMovieIds String[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GameList {
  id      String   @id @default(cuid())
  name    String
  public  Boolean  @default(false)
  gameIds String[]
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?
}

model MovieList {
  id       String   @id @default(cuid())
  name     String
  public   Boolean  @default(false)
  movieIds String[]
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?
}
