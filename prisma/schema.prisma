// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id               String            @id @default(cuid())
  userName         String
  name             String
  image            String?
  gameCollections  GameCollection[]
  movieCollections MovieCollection[]
  favoriteGames    Game[]
  favoriteMovies   Movie[]
}

model GameCollection {
  id        String   @id @default(cuid())
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
  games     Game[]
}

model MovieCollection {
  id        String   @id @default(cuid())
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
  movies    Movie[]
}

model Game {
  id               String          @id @default(cuid())
  Profile          Profile?        @relation(fields: [profileId], references: [id])
  profileId        String?
  GameCollection   GameCollection? @relation(fields: [gameCollectionId], references: [id])
  gameCollectionId String?
}

model Movie {
  id                String           @id @default(cuid())
  Profile           Profile?         @relation(fields: [profileId], references: [id])
  profileId         String?
  MovieCollection   MovieCollection? @relation(fields: [movieCollectionId], references: [id])
  movieCollectionId String?
}
